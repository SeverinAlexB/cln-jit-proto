// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file cln/primitives.proto (package cln, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum cln.ChannelSide
 */
export enum ChannelSide {
  /**
   * @generated from enum value: LOCAL = 0;
   */
  LOCAL = 0,

  /**
   * @generated from enum value: REMOTE = 1;
   */
  REMOTE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ChannelSide)
proto3.util.setEnumType(ChannelSide, "cln.ChannelSide", [
  { no: 0, name: "LOCAL" },
  { no: 1, name: "REMOTE" },
]);

/**
 * @generated from enum cln.ChannelState
 */
export enum ChannelState {
  /**
   * @generated from enum value: Openingd = 0;
   */
  Openingd = 0,

  /**
   * @generated from enum value: ChanneldAwaitingLockin = 1;
   */
  ChanneldAwaitingLockin = 1,

  /**
   * @generated from enum value: ChanneldNormal = 2;
   */
  ChanneldNormal = 2,

  /**
   * @generated from enum value: ChanneldShuttingDown = 3;
   */
  ChanneldShuttingDown = 3,

  /**
   * @generated from enum value: ClosingdSigexchange = 4;
   */
  ClosingdSigexchange = 4,

  /**
   * @generated from enum value: ClosingdComplete = 5;
   */
  ClosingdComplete = 5,

  /**
   * @generated from enum value: AwaitingUnilateral = 6;
   */
  AwaitingUnilateral = 6,

  /**
   * @generated from enum value: FundingSpendSeen = 7;
   */
  FundingSpendSeen = 7,

  /**
   * @generated from enum value: Onchain = 8;
   */
  Onchain = 8,

  /**
   * @generated from enum value: DualopendOpenInit = 9;
   */
  DualopendOpenInit = 9,

  /**
   * @generated from enum value: DualopendAwaitingLockin = 10;
   */
  DualopendAwaitingLockin = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(ChannelState)
proto3.util.setEnumType(ChannelState, "cln.ChannelState", [
  { no: 0, name: "Openingd" },
  { no: 1, name: "ChanneldAwaitingLockin" },
  { no: 2, name: "ChanneldNormal" },
  { no: 3, name: "ChanneldShuttingDown" },
  { no: 4, name: "ClosingdSigexchange" },
  { no: 5, name: "ClosingdComplete" },
  { no: 6, name: "AwaitingUnilateral" },
  { no: 7, name: "FundingSpendSeen" },
  { no: 8, name: "Onchain" },
  { no: 9, name: "DualopendOpenInit" },
  { no: 10, name: "DualopendAwaitingLockin" },
]);

/**
 * @generated from enum cln.HtlcState
 */
export enum HtlcState {
  /**
   * @generated from enum value: SentAddHtlc = 0;
   */
  SentAddHtlc = 0,

  /**
   * @generated from enum value: SentAddCommit = 1;
   */
  SentAddCommit = 1,

  /**
   * @generated from enum value: RcvdAddRevocation = 2;
   */
  RcvdAddRevocation = 2,

  /**
   * @generated from enum value: RcvdAddAckCommit = 3;
   */
  RcvdAddAckCommit = 3,

  /**
   * @generated from enum value: SentAddAckRevocation = 4;
   */
  SentAddAckRevocation = 4,

  /**
   * @generated from enum value: RcvdAddAckRevocation = 5;
   */
  RcvdAddAckRevocation = 5,

  /**
   * @generated from enum value: RcvdRemoveHtlc = 6;
   */
  RcvdRemoveHtlc = 6,

  /**
   * @generated from enum value: RcvdRemoveCommit = 7;
   */
  RcvdRemoveCommit = 7,

  /**
   * @generated from enum value: SentRemoveRevocation = 8;
   */
  SentRemoveRevocation = 8,

  /**
   * @generated from enum value: SentRemoveAckCommit = 9;
   */
  SentRemoveAckCommit = 9,

  /**
   * @generated from enum value: RcvdRemoveAckRevocation = 10;
   */
  RcvdRemoveAckRevocation = 10,

  /**
   * @generated from enum value: RcvdAddHtlc = 11;
   */
  RcvdAddHtlc = 11,

  /**
   * @generated from enum value: RcvdAddCommit = 12;
   */
  RcvdAddCommit = 12,

  /**
   * @generated from enum value: SentAddRevocation = 13;
   */
  SentAddRevocation = 13,

  /**
   * @generated from enum value: SentAddAckCommit = 14;
   */
  SentAddAckCommit = 14,

  /**
   * @generated from enum value: SentRemoveHtlc = 15;
   */
  SentRemoveHtlc = 15,

  /**
   * @generated from enum value: SentRemoveCommit = 16;
   */
  SentRemoveCommit = 16,

  /**
   * @generated from enum value: RcvdRemoveRevocation = 17;
   */
  RcvdRemoveRevocation = 17,

  /**
   * @generated from enum value: RcvdRemoveAckCommit = 18;
   */
  RcvdRemoveAckCommit = 18,

  /**
   * @generated from enum value: SentRemoveAckRevocation = 19;
   */
  SentRemoveAckRevocation = 19,
}
// Retrieve enum metadata with: proto3.getEnumType(HtlcState)
proto3.util.setEnumType(HtlcState, "cln.HtlcState", [
  { no: 0, name: "SentAddHtlc" },
  { no: 1, name: "SentAddCommit" },
  { no: 2, name: "RcvdAddRevocation" },
  { no: 3, name: "RcvdAddAckCommit" },
  { no: 4, name: "SentAddAckRevocation" },
  { no: 5, name: "RcvdAddAckRevocation" },
  { no: 6, name: "RcvdRemoveHtlc" },
  { no: 7, name: "RcvdRemoveCommit" },
  { no: 8, name: "SentRemoveRevocation" },
  { no: 9, name: "SentRemoveAckCommit" },
  { no: 10, name: "RcvdRemoveAckRevocation" },
  { no: 11, name: "RcvdAddHtlc" },
  { no: 12, name: "RcvdAddCommit" },
  { no: 13, name: "SentAddRevocation" },
  { no: 14, name: "SentAddAckCommit" },
  { no: 15, name: "SentRemoveHtlc" },
  { no: 16, name: "SentRemoveCommit" },
  { no: 17, name: "RcvdRemoveRevocation" },
  { no: 18, name: "RcvdRemoveAckCommit" },
  { no: 19, name: "SentRemoveAckRevocation" },
]);

/**
 * @generated from message cln.Amount
 */
export class Amount extends Message<Amount> {
  /**
   * @generated from field: uint64 msat = 1;
   */
  msat = protoInt64.zero;

  constructor(data?: PartialMessage<Amount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.Amount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msat", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Amount {
    return new Amount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Amount {
    return new Amount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Amount {
    return new Amount().fromJsonString(jsonString, options);
  }

  static equals(a: Amount | PlainMessage<Amount> | undefined, b: Amount | PlainMessage<Amount> | undefined): boolean {
    return proto3.util.equals(Amount, a, b);
  }
}

/**
 * @generated from message cln.AmountOrAll
 */
export class AmountOrAll extends Message<AmountOrAll> {
  /**
   * @generated from oneof cln.AmountOrAll.value
   */
  value: {
    /**
     * @generated from field: cln.Amount amount = 1;
     */
    value: Amount;
    case: "amount";
  } | {
    /**
     * @generated from field: bool all = 2;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AmountOrAll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.AmountOrAll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Amount, oneof: "value" },
    { no: 2, name: "all", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AmountOrAll {
    return new AmountOrAll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AmountOrAll {
    return new AmountOrAll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AmountOrAll {
    return new AmountOrAll().fromJsonString(jsonString, options);
  }

  static equals(a: AmountOrAll | PlainMessage<AmountOrAll> | undefined, b: AmountOrAll | PlainMessage<AmountOrAll> | undefined): boolean {
    return proto3.util.equals(AmountOrAll, a, b);
  }
}

/**
 * @generated from message cln.AmountOrAny
 */
export class AmountOrAny extends Message<AmountOrAny> {
  /**
   * @generated from oneof cln.AmountOrAny.value
   */
  value: {
    /**
     * @generated from field: cln.Amount amount = 1;
     */
    value: Amount;
    case: "amount";
  } | {
    /**
     * @generated from field: bool any = 2;
     */
    value: boolean;
    case: "any";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AmountOrAny>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.AmountOrAny";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Amount, oneof: "value" },
    { no: 2, name: "any", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AmountOrAny {
    return new AmountOrAny().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AmountOrAny {
    return new AmountOrAny().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AmountOrAny {
    return new AmountOrAny().fromJsonString(jsonString, options);
  }

  static equals(a: AmountOrAny | PlainMessage<AmountOrAny> | undefined, b: AmountOrAny | PlainMessage<AmountOrAny> | undefined): boolean {
    return proto3.util.equals(AmountOrAny, a, b);
  }
}

/**
 * @generated from message cln.ChannelStateChangeCause
 */
export class ChannelStateChangeCause extends Message<ChannelStateChangeCause> {
  constructor(data?: PartialMessage<ChannelStateChangeCause>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.ChannelStateChangeCause";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelStateChangeCause {
    return new ChannelStateChangeCause().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelStateChangeCause {
    return new ChannelStateChangeCause().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelStateChangeCause {
    return new ChannelStateChangeCause().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelStateChangeCause | PlainMessage<ChannelStateChangeCause> | undefined, b: ChannelStateChangeCause | PlainMessage<ChannelStateChangeCause> | undefined): boolean {
    return proto3.util.equals(ChannelStateChangeCause, a, b);
  }
}

/**
 * @generated from message cln.Outpoint
 */
export class Outpoint extends Message<Outpoint> {
  /**
   * @generated from field: bytes txid = 1;
   */
  txid = new Uint8Array(0);

  /**
   * @generated from field: uint32 outnum = 2;
   */
  outnum = 0;

  constructor(data?: PartialMessage<Outpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.Outpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "outnum", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Outpoint {
    return new Outpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Outpoint {
    return new Outpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Outpoint {
    return new Outpoint().fromJsonString(jsonString, options);
  }

  static equals(a: Outpoint | PlainMessage<Outpoint> | undefined, b: Outpoint | PlainMessage<Outpoint> | undefined): boolean {
    return proto3.util.equals(Outpoint, a, b);
  }
}

/**
 * @generated from message cln.Feerate
 */
export class Feerate extends Message<Feerate> {
  /**
   * @generated from oneof cln.Feerate.style
   */
  style: {
    /**
     * @generated from field: bool slow = 1;
     */
    value: boolean;
    case: "slow";
  } | {
    /**
     * @generated from field: bool normal = 2;
     */
    value: boolean;
    case: "normal";
  } | {
    /**
     * @generated from field: bool urgent = 3;
     */
    value: boolean;
    case: "urgent";
  } | {
    /**
     * @generated from field: uint32 perkb = 4;
     */
    value: number;
    case: "perkb";
  } | {
    /**
     * @generated from field: uint32 perkw = 5;
     */
    value: number;
    case: "perkw";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Feerate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.Feerate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slow", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "style" },
    { no: 2, name: "normal", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "style" },
    { no: 3, name: "urgent", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "style" },
    { no: 4, name: "perkb", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "style" },
    { no: 5, name: "perkw", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "style" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Feerate {
    return new Feerate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Feerate {
    return new Feerate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Feerate {
    return new Feerate().fromJsonString(jsonString, options);
  }

  static equals(a: Feerate | PlainMessage<Feerate> | undefined, b: Feerate | PlainMessage<Feerate> | undefined): boolean {
    return proto3.util.equals(Feerate, a, b);
  }
}

/**
 * @generated from message cln.OutputDesc
 */
export class OutputDesc extends Message<OutputDesc> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cln.Amount amount = 2;
   */
  amount?: Amount;

  constructor(data?: PartialMessage<OutputDesc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.OutputDesc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Amount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutputDesc {
    return new OutputDesc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutputDesc {
    return new OutputDesc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutputDesc {
    return new OutputDesc().fromJsonString(jsonString, options);
  }

  static equals(a: OutputDesc | PlainMessage<OutputDesc> | undefined, b: OutputDesc | PlainMessage<OutputDesc> | undefined): boolean {
    return proto3.util.equals(OutputDesc, a, b);
  }
}

/**
 * @generated from message cln.RouteHop
 */
export class RouteHop extends Message<RouteHop> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string short_channel_id = 2;
   */
  shortChannelId = "";

  /**
   * @generated from field: cln.Amount feebase = 3;
   */
  feebase?: Amount;

  /**
   * @generated from field: uint32 feeprop = 4;
   */
  feeprop = 0;

  /**
   * @generated from field: uint32 expirydelta = 5;
   */
  expirydelta = 0;

  constructor(data?: PartialMessage<RouteHop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.RouteHop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "short_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feebase", kind: "message", T: Amount },
    { no: 4, name: "feeprop", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "expirydelta", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteHop {
    return new RouteHop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteHop {
    return new RouteHop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteHop {
    return new RouteHop().fromJsonString(jsonString, options);
  }

  static equals(a: RouteHop | PlainMessage<RouteHop> | undefined, b: RouteHop | PlainMessage<RouteHop> | undefined): boolean {
    return proto3.util.equals(RouteHop, a, b);
  }
}

/**
 * @generated from message cln.Routehint
 */
export class Routehint extends Message<Routehint> {
  /**
   * @generated from field: repeated cln.RouteHop hops = 1;
   */
  hops: RouteHop[] = [];

  constructor(data?: PartialMessage<Routehint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.Routehint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hops", kind: "message", T: RouteHop, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Routehint {
    return new Routehint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Routehint {
    return new Routehint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Routehint {
    return new Routehint().fromJsonString(jsonString, options);
  }

  static equals(a: Routehint | PlainMessage<Routehint> | undefined, b: Routehint | PlainMessage<Routehint> | undefined): boolean {
    return proto3.util.equals(Routehint, a, b);
  }
}

/**
 * @generated from message cln.RoutehintList
 */
export class RoutehintList extends Message<RoutehintList> {
  /**
   * @generated from field: repeated cln.Routehint hints = 2;
   */
  hints: Routehint[] = [];

  constructor(data?: PartialMessage<RoutehintList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.RoutehintList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "hints", kind: "message", T: Routehint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoutehintList {
    return new RoutehintList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoutehintList {
    return new RoutehintList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoutehintList {
    return new RoutehintList().fromJsonString(jsonString, options);
  }

  static equals(a: RoutehintList | PlainMessage<RoutehintList> | undefined, b: RoutehintList | PlainMessage<RoutehintList> | undefined): boolean {
    return proto3.util.equals(RoutehintList, a, b);
  }
}

/**
 * @generated from message cln.TlvEntry
 */
export class TlvEntry extends Message<TlvEntry> {
  /**
   * @generated from field: uint64 type = 1;
   */
  type = protoInt64.zero;

  /**
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<TlvEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.TlvEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TlvEntry {
    return new TlvEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TlvEntry {
    return new TlvEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TlvEntry {
    return new TlvEntry().fromJsonString(jsonString, options);
  }

  static equals(a: TlvEntry | PlainMessage<TlvEntry> | undefined, b: TlvEntry | PlainMessage<TlvEntry> | undefined): boolean {
    return proto3.util.equals(TlvEntry, a, b);
  }
}

/**
 * @generated from message cln.TlvStream
 */
export class TlvStream extends Message<TlvStream> {
  /**
   * @generated from field: repeated cln.TlvEntry entries = 1;
   */
  entries: TlvEntry[] = [];

  constructor(data?: PartialMessage<TlvStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cln.TlvStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: TlvEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TlvStream {
    return new TlvStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TlvStream {
    return new TlvStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TlvStream {
    return new TlvStream().fromJsonString(jsonString, options);
  }

  static equals(a: TlvStream | PlainMessage<TlvStream> | undefined, b: TlvStream | PlainMessage<TlvStream> | undefined): boolean {
    return proto3.util.equals(TlvStream, a, b);
  }
}

